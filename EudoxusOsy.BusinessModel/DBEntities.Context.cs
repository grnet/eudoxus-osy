//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EudoxusOsy.BusinessModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class DBEntities : DbContext
    {
        public DBEntities()
            : base("name=DBEntities")
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Bank> Banks { get; set; }
        public DbSet<BankTransfer> BankTransfers { get; set; }
        public DbSet<Book> Books { get; set; }
        public DbSet<BookBlackList> BookBlackLists { get; set; }
        public DbSet<BookPrice> BookPrices { get; set; }
        public DbSet<BookPriceRequest> BookPriceRequests { get; set; }
        public DbSet<BookPriceRequestVolume> BookPriceRequestVolumes { get; set; }
        public DbSet<BookSupplier> BookSuppliers { get; set; }
        public DbSet<Catalog> Catalogs { get; set; }
        public DbSet<CatalogGroup> CatalogGroups { get; set; }
        public DbSet<CatalogLog> CatalogLogs { get; set; }
        public DbSet<Deduction> Deductions { get; set; }
        public DbSet<Department> Departments { get; set; }
        public DbSet<Discount> Discounts { get; set; }
        public DbSet<Email> Emails { get; set; }
        public DbSet<File> Files { get; set; }
        public DbSet<FileSelfPublisher> FileSelfPublishers { get; set; }
        public DbSet<Institution> Institutions { get; set; }
        public DbSet<Invoice> Invoices { get; set; }
        public DbSet<City> Cities { get; set; }
        public DbSet<Prefecture> Prefectures { get; set; }
        public DbSet<LockedCatalogGroup> LockedCatalogGroups { get; set; }
        public DbSet<PaymentOrder> PaymentOrders { get; set; }
        public DbSet<Phase> Phases { get; set; }
        public DbSet<PriceModificationReason> PriceModificationReasons { get; set; }
        public DbSet<PriceRejectionReason> PriceRejectionReasons { get; set; }
        public DbSet<PublicFinancialOffice> PublicFinancialOffices { get; set; }
        public DbSet<QueueEntry> QueueEntries { get; set; }
        public DbSet<Receipt> Receipts { get; set; }
        public DbSet<Reporter> Reporters { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<SMS> SMS { get; set; }
        public DbSet<Supplier> Suppliers { get; set; }
        public DbSet<SupplierDetail> SupplierDetails { get; set; }
        public DbSet<SupplierIBAN> SupplierIBANs { get; set; }
        public DbSet<SupplierPhase> SupplierPhases { get; set; }
        public DbSet<WelfareRecord> WelfareRecords { get; set; }
        public DbSet<WelfareRecordEntry> WelfareRecordEntries { get; set; }
        public DbSet<KostologisiPrice> KostologisiPrices { get; set; }
        public DbSet<Verify> Verifies { get; set; }
        public DbSet<CatalogGroupLog> CatalogGroupLogs { get; set; }
        public DbSet<aspnet_Membership> aspnet_Membership { get; set; }
        public DbSet<aspnet_Users> aspnet_Users { get; set; }
        public DbSet<ServiceLog> ServiceLogs { get; set; }
        public DbSet<TaskLastRunTime> TaskLastRunTimes { get; set; }
        public DbSet<AuditReceipt> AuditReceipts { get; set; }
        public DbSet<ApplicationData> ApplicationDatas { get; set; }
        public DbSet<BookPriceChange> BookPriceChanges { get; set; }
        public DbSet<BusinessLogicErrorsKP> BusinessLogicErrorsKPS { get; set; }
        public DbSet<Archive> Archives { get; set; }
    
        public virtual int CreateCatalogsForPhase(Nullable<int> myPhaseID)
        {
            var myPhaseIDParameter = myPhaseID.HasValue ?
                new ObjectParameter("myPhaseID", myPhaseID) :
                new ObjectParameter("myPhaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateCatalogsForPhase", myPhaseIDParameter);
        }
    
        public virtual ObjectResult<Commitments> ExportCommitmentsRegistry(Nullable<int> phaseID)
        {
            var phaseIDParameter = phaseID.HasValue ?
                new ObjectParameter("phaseID", phaseID) :
                new ObjectParameter("phaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Commitments>("ExportCommitmentsRegistry", phaseIDParameter);
        }
    
        public virtual ObjectResult<SuppliersNoLogisticBooks> SuppliersNoLogisticBooks(Nullable<int> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SuppliersNoLogisticBooks>("SuppliersNoLogisticBooks", yearParameter);
        }
    
        public virtual int CacheStats(Nullable<int> phaseId)
        {
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CacheStats", phaseIdParameter);
        }
    
        public virtual int InsertToReceiptsFromXml(Nullable<int> phaseId)
        {
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertToReceiptsFromXml", phaseIdParameter);
        }
    
        public virtual ObjectResult<ReceiptsXmlComparisonResult> CompareReceipts(Nullable<int> phaseId, Nullable<int> compareSide)
        {
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            var compareSideParameter = compareSide.HasValue ?
                new ObjectParameter("compareSide", compareSide) :
                new ObjectParameter("compareSide", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReceiptsXmlComparisonResult>("CompareReceipts", phaseIdParameter, compareSideParameter);
        }
    
        public virtual int InsertCorrectedFiles(string path, string inputDataFileName, Nullable<int> mode)
        {
            var pathParameter = path != null ?
                new ObjectParameter("path", path) :
                new ObjectParameter("path", typeof(string));
    
            var inputDataFileNameParameter = inputDataFileName != null ?
                new ObjectParameter("inputDataFileName", inputDataFileName) :
                new ObjectParameter("inputDataFileName", typeof(string));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCorrectedFiles", pathParameter, inputDataFileNameParameter, modeParameter);
        }
    
        public virtual int ComplementReceipts(Nullable<int> phaseId)
        {
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ComplementReceipts", phaseIdParameter);
        }
    
        public virtual ObjectResult<CoAuthors> GetCoAuthors(Nullable<int> myPhaseID)
        {
            var myPhaseIDParameter = myPhaseID.HasValue ?
                new ObjectParameter("myPhaseID", myPhaseID) :
                new ObjectParameter("myPhaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CoAuthors>("GetCoAuthors", myPhaseIDParameter);
        }
    
        public virtual int spReceipt(Nullable<long> registrationKpsId, Nullable<System.DateTime> received, Nullable<long> bookKpsId, Nullable<long> secretariatKpsId, Nullable<System.DateTime> sentByKps, Nullable<int> reason, Nullable<int> auditReceiptID, ObjectParameter ret)
        {
            var registrationKpsIdParameter = registrationKpsId.HasValue ?
                new ObjectParameter("registrationKpsId", registrationKpsId) :
                new ObjectParameter("registrationKpsId", typeof(long));
    
            var receivedParameter = received.HasValue ?
                new ObjectParameter("received", received) :
                new ObjectParameter("received", typeof(System.DateTime));
    
            var bookKpsIdParameter = bookKpsId.HasValue ?
                new ObjectParameter("bookKpsId", bookKpsId) :
                new ObjectParameter("bookKpsId", typeof(long));
    
            var secretariatKpsIdParameter = secretariatKpsId.HasValue ?
                new ObjectParameter("secretariatKpsId", secretariatKpsId) :
                new ObjectParameter("secretariatKpsId", typeof(long));
    
            var sentByKpsParameter = sentByKps.HasValue ?
                new ObjectParameter("sentByKps", sentByKps) :
                new ObjectParameter("sentByKps", typeof(System.DateTime));
    
            var reasonParameter = reason.HasValue ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(int));
    
            var auditReceiptIDParameter = auditReceiptID.HasValue ?
                new ObjectParameter("auditReceiptID", auditReceiptID) :
                new ObjectParameter("auditReceiptID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReceipt", registrationKpsIdParameter, receivedParameter, bookKpsIdParameter, secretariatKpsIdParameter, sentByKpsParameter, reasonParameter, auditReceiptIDParameter, ret);
        }
    
        public virtual ObjectResult<SupplierFullStatistics> GetSupplierFullStatistics(Nullable<int> supplier_kpsid, string afm, Nullable<int> phaseID, string name, Nullable<int> supplier_type, ObjectParameter count)
        {
            var supplier_kpsidParameter = supplier_kpsid.HasValue ?
                new ObjectParameter("supplier_kpsid", supplier_kpsid) :
                new ObjectParameter("supplier_kpsid", typeof(int));
    
            var afmParameter = afm != null ?
                new ObjectParameter("afm", afm) :
                new ObjectParameter("afm", typeof(string));
    
            var phaseIDParameter = phaseID.HasValue ?
                new ObjectParameter("PhaseID", phaseID) :
                new ObjectParameter("PhaseID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var supplier_typeParameter = supplier_type.HasValue ?
                new ObjectParameter("supplier_type", supplier_type) :
                new ObjectParameter("supplier_type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SupplierFullStatistics>("GetSupplierFullStatistics", supplier_kpsidParameter, afmParameter, phaseIDParameter, nameParameter, supplier_typeParameter, count);
        }
    
        public virtual ObjectResult<SuppliersStatsForExport> GetSuppliersStatsForExport(Nullable<int> phaseID)
        {
            var phaseIDParameter = phaseID.HasValue ?
                new ObjectParameter("phaseID", phaseID) :
                new ObjectParameter("phaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SuppliersStatsForExport>("GetSuppliersStatsForExport", phaseIDParameter);
        }
    
        public virtual int Rest_PP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rest_PP");
        }
    
        public virtual int SuppliersFullStatistics_PP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SuppliersFullStatistics_PP");
        }
    
        public virtual ObjectResult<BasicStats> GetBasicStats(Nullable<int> phaseId)
        {
            var phaseIdParameter = phaseId.HasValue ?
                new ObjectParameter("phaseId", phaseId) :
                new ObjectParameter("phaseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BasicStats>("GetBasicStats", phaseIdParameter);
        }
    }
}
